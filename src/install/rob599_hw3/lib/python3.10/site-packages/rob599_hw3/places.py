import rclpy
from rclpy.node import Node
from geometry_msgs.msg import PoseStamped
from visualization_msgs.msg import Marker
from rob599_msgs2.srv import MemorizePosition, ClearPositions, Save, Load
from tf2_ros import TransformException
from tf2_ros.buffer import Buffer
from tf2_ros.transform_listener import TransformListener
import json
import os

class PlacesNode(Node):
    def __init__(self):
        super().__init__('places')
        self.positions = {}

        # Service definitions
        self.memorize_position_service = self.create_service(
            MemorizePosition, 'memorize_position', self.memorize_position_callback)
        self.clear_positions_service = self.create_service(
            ClearPositions, 'clear_positions', self.clear_positions_callback)
        self.save_positions_service = self.create_service(
            Save, 'save', self.save_positions_callback)
        self.load_positions_service = self.create_service(
            Load, 'load', self.load_positions_callback)

        # Marker publisher
        self.marker_publisher = self.create_publisher(Marker, 'positions_marker', 10)

        # TF buffer and listener
        self.tf_buffer = Buffer()
        self.tf_listener = TransformListener(self.tf_buffer, self)

    def memorize_position_callback(self, request, response):
        # Store the position
        current_position = self.get_current_position()  # Implement this function
        self.positions[request.name] = current_position
        self.publish_markers()
        response.success = True
        self.get_logger().info(f"Position memorized with name: {request.name}")
        return response

    def clear_positions_callback(self, request, response):
        # Clear stored positions
        self.positions.clear()
        self.publish_markers()
        response.success = True
        self.get_logger().info("Positions cleared")
        return response

    def save_positions_callback(self, request, response):
        # Save positions to a file
        try:
            with open(os.path.join('resources', request.filename), 'w') as f:
                json.dump(self.positions, f)
            response.success = True
            self.get_logger().info("Positions saved")
        except Exception as e:
            response.success = False
            self.get_logger().error(f"Failed to save positions: {e}")
        return response

    def load_positions_callback(self, request, response):
        # Load positions from a file
        try:
            with open(os.path.join('resources', request.filename), 'r') as f:
                self.positions = json.load(f)
            self.publish_markers()
            response.success = True
            self.get_logger().info("Positions loaded")
        except Exception as e:
            response.success = False
            self.get_logger().error(f"Failed to load positions: {e}")
        return response

    def publish_markers(self):
        marker = Marker()
        marker.header.frame_id = 'map'
        marker.type = Marker.ARROW
        marker.action = Marker.ADD
        marker.scale.x = 0.5
        marker.scale.y = 0.1
        marker.scale.z = 0.1
        marker.color.a = 1.0
        marker.color.r = 0.0
        marker.color.g = 1.0
        marker.color.b = 0.0

        marker_array = []
        for name, position in self.positions.items():
            marker.pose = position
            marker.id = hash(name)  # Generate a unique ID for each marker
            marker.text = name
            marker_array.append(marker)

        self.marker_publisher.publish(marker_array)

    def get_current_position(self, frame_id='map'):
        # Build a stamped pose for the base link origin
        origin = PoseStamped()
        origin.header.frame_id = 'base_link'

        # Set the position
        origin.pose.position.x = 0.0
        origin.pose.position.y = 0.0
        origin.pose.position.z = 0.0

        # Set an arbitrary orientation
        origin.pose.orientation.x = 0.0
        origin.pose.orientation.y = 0.0
        origin.pose.orientation.z = 0.0
        origin.pose.orientation.w = 1.0

        # Get the transform to the map frame
        try:
            new_pose = self.tf_buffer.transform(origin, frame_id, rclpy.duration.Duration(seconds=1))
            return new_pose.pose
        except TransformException as e:
            self.get_logger().error(f"Failed to get current position: {e}")
            return None

def main(args=None):
    rclpy.init(args=args)
    places_node = PlacesNode()
    rclpy.spin(places_node)
    rclpy.shutdown()

if __name__ == '__main__':
    main()